-- EduSphere AI Multilingual Content Database Schema
-- Creates tables for storing translations and multilingual content
-- Supports caching of Claude Sonnet 4 translations and ElevenLabs audio metadata
-- World's Largest Hackathon Project - EduSphere AI

-- =====================================================
-- MULTILINGUAL CONTENT TABLE
-- =====================================================
-- Stores translations generated by Claude Sonnet 4 and other translation methods
-- Enables caching and reuse of translations to improve performance and reduce API costs

CREATE TABLE IF NOT EXISTS multilingual_content (
    -- Primary key and identification
    id SERIAL PRIMARY KEY,
    
    -- Content identification and translation mapping
    original_text TEXT NOT NULL,                    -- Original text in source language
    language VARCHAR(10) NOT NULL,                  -- Target language code (en, es, zh, etc.)
    translated_text TEXT NOT NULL,                  -- Translated text in target language
    source_language VARCHAR(10) DEFAULT 'en',      -- Source language code (default: English)
    
    -- Translation metadata and quality tracking
    translation_method VARCHAR(50) DEFAULT 'claude_sonnet_4',  -- Method used for translation
    quality_score INTEGER DEFAULT 5,               -- Quality rating (1-10, higher is better)
    user_id VARCHAR(255),                          -- User who requested the translation
    content_type VARCHAR(50) DEFAULT 'narration',  -- Type of content (narration, ui, educational, etc.)
    
    -- Audit and tracking fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Ensure uniqueness for translation pairs
    UNIQUE(original_text, language, source_language)
);

-- =====================================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- =====================================================

-- Index for fast lookup of translations by original text and target language
CREATE INDEX IF NOT EXISTS idx_multilingual_original_language 
ON multilingual_content(original_text, language);

-- Index for user-specific translation queries
CREATE INDEX IF NOT EXISTS idx_multilingual_user_id 
ON multilingual_content(user_id);

-- Index for time-based queries and cleanup operations
CREATE INDEX IF NOT EXISTS idx_multilingual_created_at 
ON multilingual_content(created_at);

-- Index for content type filtering
CREATE INDEX IF NOT EXISTS idx_multilingual_content_type 
ON multilingual_content(content_type);

-- Index for quality-based sorting and filtering
CREATE INDEX IF NOT EXISTS idx_multilingual_quality 
ON multilingual_content(quality_score DESC);

-- Composite index for efficient translation lookups with quality sorting
CREATE INDEX IF NOT EXISTS idx_multilingual_lookup_quality 
ON multilingual_content(original_text, language, source_language, quality_score DESC);

-- =====================================================
-- AUDIO CACHE TABLE
-- =====================================================
-- Stores metadata for generated audio files from ElevenLabs
-- Enables caching of expensive audio generation operations

CREATE TABLE IF NOT EXISTS audio_cache (
    -- Primary key and identification
    id SERIAL PRIMARY KEY,
    
    -- Content identification for audio caching
    text_hash VARCHAR(64) NOT NULL,                 -- SHA-256 hash of the text content
    language VARCHAR(10) NOT NULL,                  -- Language code for the audio
    voice_id VARCHAR(100) NOT NULL,                 -- ElevenLabs voice ID used
    
    -- Audio file metadata
    audio_url TEXT,                                 -- URL or path to cached audio file
    audio_size INTEGER,                             -- Size of audio file in bytes
    duration_seconds DECIMAL(10,2),                 -- Duration of audio in seconds
    model_used VARCHAR(50),                         -- ElevenLabs model used for generation
    
    -- User and usage tracking
    user_id VARCHAR(255),                          -- User who generated the audio
    usage_count INTEGER DEFAULT 1,                 -- Number of times this audio was used
    
    -- Cache management
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_accessed TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP DEFAULT (CURRENT_TIMESTAMP + INTERVAL '7 days'),  -- Auto-expire after 7 days
    
    -- Ensure uniqueness for audio cache entries
    UNIQUE(text_hash, language, voice_id)
);

-- =====================================================
-- AUDIO CACHE INDEXES
-- =====================================================

-- Index for fast audio lookup by content hash and language
CREATE INDEX IF NOT EXISTS idx_audio_cache_hash_lang 
ON audio_cache(text_hash, language);

-- Index for voice-specific queries
CREATE INDEX IF NOT EXISTS idx_audio_cache_voice 
ON audio_cache(voice_id);

-- Index for cache cleanup operations (expired entries)
CREATE INDEX IF NOT EXISTS idx_audio_cache_expires 
ON audio_cache(expires_at);

-- Index for user-specific audio queries
CREATE INDEX IF NOT EXISTS idx_audio_cache_user 
ON audio_cache(user_id);

-- Index for usage analytics
CREATE INDEX IF NOT EXISTS idx_audio_cache_usage 
ON audio_cache(usage_count DESC, last_accessed DESC);

-- =====================================================
-- LANGUAGE PREFERENCES TABLE
-- =====================================================
-- Stores user language preferences and settings

CREATE TABLE IF NOT EXISTS user_language_preferences (
    -- Primary key and user identification
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL UNIQUE,          -- User identifier
    
    -- Language preferences
    primary_language VARCHAR(10) DEFAULT 'en',     -- User's primary language
    secondary_languages TEXT[],                     -- Array of secondary languages
    
    -- Voice preferences for each language
    preferred_voices JSONB DEFAULT '{}',            -- JSON object mapping language codes to voice IDs
    
    -- Audio settings
    speech_rate DECIMAL(3,2) DEFAULT 1.0,          -- Speech rate multiplier (0.5 - 2.0)
    speech_pitch DECIMAL(3,2) DEFAULT 1.0,         -- Speech pitch multiplier (0.5 - 2.0)
    speech_volume DECIMAL(3,2) DEFAULT 1.0,        -- Speech volume multiplier (0.0 - 1.0)
    
    -- Auto-translation preferences
    auto_translate BOOLEAN DEFAULT TRUE,            -- Enable automatic translation
    translation_quality_threshold INTEGER DEFAULT 7, -- Minimum quality score for cached translations
    
    -- Audit fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Index for user language preference lookups
CREATE INDEX IF NOT EXISTS idx_user_language_prefs_user 
ON user_language_preferences(user_id);

-- =====================================================
-- TRANSLATION STATISTICS TABLE
-- =====================================================
-- Tracks translation usage and performance metrics

CREATE TABLE IF NOT EXISTS translation_statistics (
    -- Primary key and identification
    id SERIAL PRIMARY KEY,
    
    -- Translation tracking
    source_language VARCHAR(10) NOT NULL,
    target_language VARCHAR(10) NOT NULL,
    translation_method VARCHAR(50) NOT NULL,
    
    -- Usage metrics
    total_requests INTEGER DEFAULT 0,
    successful_translations INTEGER DEFAULT 0,
    failed_translations INTEGER DEFAULT 0,
    cache_hits INTEGER DEFAULT 0,
    
    -- Performance metrics
    average_response_time_ms INTEGER DEFAULT 0,
    total_characters_translated BIGINT DEFAULT 0,
    
    -- Quality metrics
    average_quality_score DECIMAL(3,2) DEFAULT 0.0,
    user_feedback_positive INTEGER DEFAULT 0,
    user_feedback_negative INTEGER DEFAULT 0,
    
    -- Time period tracking
    date_recorded DATE DEFAULT CURRENT_DATE,
    
    -- Ensure uniqueness per day per language pair per method
    UNIQUE(source_language, target_language, translation_method, date_recorded)
);

-- Index for statistics queries
CREATE INDEX IF NOT EXISTS idx_translation_stats_date 
ON translation_statistics(date_recorded DESC);

CREATE INDEX IF NOT EXISTS idx_translation_stats_languages 
ON translation_statistics(source_language, target_language);

-- =====================================================
-- SAMPLE DATA INSERTION
-- =====================================================
-- Insert some common translations to bootstrap the system

INSERT INTO multilingual_content (original_text, language, translated_text, source_language, translation_method, quality_score, content_type) VALUES
-- English to Spanish translations
('Hello', 'es', 'Hola', 'en', 'manual_verified', 10, 'ui'),
('Thank you', 'es', 'Gracias', 'en', 'manual_verified', 10, 'ui'),
('Good morning', 'es', 'Buenos días', 'en', 'manual_verified', 10, 'ui'),
('Good night', 'es', 'Buenas noches', 'en', 'manual_verified', 10, 'ui'),
('This is a big gray elephant!', 'es', '¡Este es un gran elefante gris!', 'en', 'manual_verified', 9, 'narration'),
('Look at this beautiful red circle!', 'es', '¡Mira este hermoso círculo rojo!', 'en', 'manual_verified', 9, 'narration'),
('Here we have a blue square shape!', 'es', '¡Aquí tenemos una forma de cuadrado azul!', 'en', 'manual_verified', 9, 'narration'),

-- English to Chinese translations
('Hello', 'zh', '你好', 'en', 'manual_verified', 10, 'ui'),
('Thank you', 'zh', '谢谢', 'en', 'manual_verified', 10, 'ui'),
('Good morning', 'zh', '早上好', 'en', 'manual_verified', 10, 'ui'),
('Good night', 'zh', '晚安', 'en', 'manual_verified', 10, 'ui'),
('This is a big gray elephant!', 'zh', '这是一只大灰象！', 'en', 'manual_verified', 9, 'narration'),
('Look at this beautiful red circle!', 'zh', '看这个美丽的红圆圈！', 'en', 'manual_verified', 9, 'narration'),
('Here we have a blue square shape!', 'zh', '这里我们有一个蓝色的正方形！', 'en', 'manual_verified', 9, 'narration')

ON CONFLICT (original_text, language, source_language) DO NOTHING;

-- =====================================================
-- UTILITY FUNCTIONS
-- =====================================================

-- Function to clean up expired audio cache entries
CREATE OR REPLACE FUNCTION cleanup_expired_audio_cache()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM audio_cache WHERE expires_at < CURRENT_TIMESTAMP;
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- Function to update translation statistics
CREATE OR REPLACE FUNCTION update_translation_stats(
    p_source_lang VARCHAR(10),
    p_target_lang VARCHAR(10),
    p_method VARCHAR(50),
    p_success BOOLEAN,
    p_response_time_ms INTEGER DEFAULT 0,
    p_characters INTEGER DEFAULT 0,
    p_quality_score DECIMAL(3,2) DEFAULT 0.0
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO translation_statistics (
        source_language, 
        target_language, 
        translation_method,
        total_requests,
        successful_translations,
        failed_translations,
        average_response_time_ms,
        total_characters_translated,
        average_quality_score
    ) VALUES (
        p_source_lang,
        p_target_lang,
        p_method,
        1,
        CASE WHEN p_success THEN 1 ELSE 0 END,
        CASE WHEN p_success THEN 0 ELSE 1 END,
        p_response_time_ms,
        p_characters,
        p_quality_score
    )
    ON CONFLICT (source_language, target_language, translation_method, date_recorded)
    DO UPDATE SET
        total_requests = translation_statistics.total_requests + 1,
        successful_translations = translation_statistics.successful_translations + 
            CASE WHEN p_success THEN 1 ELSE 0 END,
        failed_translations = translation_statistics.failed_translations + 
            CASE WHEN p_success THEN 0 ELSE 1 END,
        average_response_time_ms = (
            translation_statistics.average_response_time_ms * translation_statistics.total_requests + p_response_time_ms
        ) / (translation_statistics.total_requests + 1),
        total_characters_translated = translation_statistics.total_characters_translated + p_characters,
        average_quality_score = (
            translation_statistics.average_quality_score * translation_statistics.successful_translations + p_quality_score
        ) / GREATEST(translation_statistics.successful_translations + CASE WHEN p_success THEN 1 ELSE 0 END, 1);
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- COMMENTS AND DOCUMENTATION
-- =====================================================

COMMENT ON TABLE multilingual_content IS 'Stores translations generated by Claude Sonnet 4 and other translation services for caching and reuse';
COMMENT ON COLUMN multilingual_content.original_text IS 'The original text in the source language that needs translation';
COMMENT ON COLUMN multilingual_content.language IS 'ISO 639-1 language code for the target language (e.g., en, es, zh)';
COMMENT ON COLUMN multilingual_content.translated_text IS 'The translated text in the target language';
COMMENT ON COLUMN multilingual_content.translation_method IS 'Method used for translation (claude_sonnet_4, google_translate, manual_verified, etc.)';
COMMENT ON COLUMN multilingual_content.quality_score IS 'Quality rating from 1-10, where 10 is perfect translation';

COMMENT ON TABLE audio_cache IS 'Caches metadata for generated audio files from ElevenLabs to avoid regenerating expensive audio content';
COMMENT ON COLUMN audio_cache.text_hash IS 'SHA-256 hash of the text content for efficient lookup and deduplication';
COMMENT ON COLUMN audio_cache.voice_id IS 'ElevenLabs voice ID used for generation, enabling voice-specific caching';
COMMENT ON COLUMN audio_cache.expires_at IS 'Expiration timestamp for cache cleanup, default 7 days from creation';

COMMENT ON TABLE user_language_preferences IS 'Stores user-specific language preferences and voice settings for personalized experience';
COMMENT ON TABLE translation_statistics IS 'Tracks translation usage metrics and performance for analytics and optimization';

-- =====================================================
-- GRANTS AND PERMISSIONS
-- =====================================================
-- Note: In production, you would set up appropriate user roles and permissions
-- For development, these tables will inherit the default permissions

-- Example permissions (uncomment and modify for production):
-- GRANT SELECT, INSERT, UPDATE ON multilingual_content TO edusphere_app_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON audio_cache TO edusphere_app_user;
-- GRANT SELECT, INSERT, UPDATE ON user_language_preferences TO edusphere_app_user;
-- GRANT SELECT, INSERT, UPDATE ON translation_statistics TO edusphere_app_user;

-- =====================================================
-- MAINTENANCE NOTES
-- =====================================================
-- 1. Run cleanup_expired_audio_cache() periodically to remove old cached audio files
-- 2. Monitor translation_statistics for usage patterns and optimization opportunities
-- 3. Consider partitioning large tables by date for better performance
-- 4. Regularly backup translation data as it represents valuable cached content
-- 5. Monitor quality_score trends to identify translation methods that need improvement

-- End of schema